generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL_UPAY")
  relationMode = "prisma"
}

enum Role {
  customer
  admin
}

model Users {
  userIndex            Int       @unique @default(autoincrement())
  userId               String    @id @default(uuid())
  firstName            String    @db.Text
  lastName             String    @db.Text
  email                String    @unique
  phone                String    @db.Text
  role                 Role
  password             String    @db.Text
  imageUrl             String?   @db.Text
  imagePath            String?   @db.Text
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @updatedAt
  passwordResetToken   String?   @db.Text
  passwordResetExpires DateTime?

  @@map("_users")
}

model Products {
  productIndex  Int       @unique @default(autoincrement())
  productId     String    @id @default(uuid())
  productName   String    @db.Text
  specification String?   @db.Text
  imageUrl      String?   @db.Text
  imagePath     String?   @db.Text
  createdAt     DateTime  @default(now())
  updateAt      DateTime? @updatedAt

  @@map("_products")
}

// model Subject {
//   subjectIndex Int          @unique @default(autoincrement())
//   subjectId    String       @id @default(uuid())
//   subjectName  String       @db.VarChar(255)
//   prediction   Prediction[]
//   createdAt    DateTime     @default(now())
//   updateAt     DateTime?    @updatedAt
// }

// model Prediction {
//   predictionIndex  Int       @unique @default(autoincrement())
//   predictionId     String    @id @default(uuid())
//   predictedBy      User      @relation(fields: [predictedById], references: [userId])
//   predictedById    String    @db.VarChar(255)
//   student          Student   @relation(fields: [studentId], references: [studentId])
//   studentId        String    @db.VarChar(255)
//   subject          Subject   @relation(fields: [subjectId], references: [subjectId])
//   subjectId        String    @db.VarChar(255)
//   previousExamMark Int?
//   predictedMark    Int
//   attendance       Int
//   remark           String?    @db.VarChar(1500)
//   createdAt        DateTime  @default(now())
//   updateAt         DateTime? @updatedAt

//   @@index([predictedById])
//   @@index([studentId])
//   @@index([subjectId])
// }

// IMPORTANT COMMNANDS 

// INITIALIZE PRISMA
// npx prisma init --datasource-provider postgresql
// npx prisma init --datasource-provider mysql

// APPLY CHANGES TO ACTUAL DATABASE 
// npx prisma migrate dev --name test1

// GENERATE THE CLIENT TO INTERACT WITH THE DATABASE
// npx prisma generate

// TO EXPLORE AND MANUPLATE DATA USE PRISMA STUDIO
// npx prisma studio

// OWSP : to check it out
